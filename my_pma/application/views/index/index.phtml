<div id="breadcrumb">
	<h2>Index &gt; </h2>
	<h3>Index</h3>
</div>
<h4>Demo d'une implémentation d'un modèle mvc :</h4>
<ul>
	<li>Séparation des couches :
		<ul>
			<li><strong>Modele</strong> : acces aux données (bdd, xml, fichiers de conf)</li>
			<li><strong>Vue</strong> : rendu visuel de l'application (html / javascript / xml / css)</li>
			<li><strong>Controlleur</strong> : conditionnement de l'application</li>
		</ul>
	</li>
	<li>Présentation du CRUD :
		<ul>
			<li><strong>C</strong>reate : création d'une entité</li>
			<li><strong>R</strong>ead : lecture d'une entité</li>
			<li><strong>U</strong>update : mise à jour d'une entité</li>
			<li><strong>D</strong>delete : destruction d'une entité</li>
		</ul>
	</li>
	<li>Présentation de l'orienté objet :
		<ul>
			<li>Concept de l'orienté objet</li>
			<li>Classes : abstraction du réel ou d'une idée</li>
			<li>Parametre de classes : $instance-&gt;variable</li>
			<li>Methode de classes : $instance-&gt;function()</li>
			<li>Visibilité des parametre/methode : public protected private</li>
			<li>Constructeur : aka public function __construct(){...}</li>
			<li>Destructeur : aka public function __destruct(){...}</li>
			<li>Static : ClassName::getInstance() késako ?! </li>
			<li>Classes abstraites / methodes abstraites abstract function myAbstractFunction();</li>
		</ul>
	</li>
	<li>Design pattern :
		<ul>
			<li>Introduction : pourquoi faire ?</li>
			<li>MVC2 : c'est pas faux</li>
			<li>Singleton : heeiin</li>
			<li>Active record : (jsuis a 3 leffe now)</li>
		</ul>
	</li>
</ul>